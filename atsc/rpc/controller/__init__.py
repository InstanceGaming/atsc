# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: protobufs/controller.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import (
    field_output as _field_output__,
    phase as _phase__,
    signal as _signal__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class CycleMode(betterproto.Enum):
    PAUSE = 0
    SEQUENTIAL = 1
    CONCURRENT = 2


@dataclass(eq=False, repr=False)
class ControllerTestConnectionRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerTestConnectionReply(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerMetadataRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerMetadataReply(betterproto.Message):
    version: str = betterproto.string_field(10)
    started_at_epoch: int = betterproto.uint64_field(11)
    supports_time_freeze: bool = betterproto.bool_field(30)
    supports_time_scaling: bool = betterproto.bool_field(31)
    supports_coordination: bool = betterproto.bool_field(32)
    supports_scheduling: bool = betterproto.bool_field(33)
    supports_dimming: bool = betterproto.bool_field(34)
    field_outputs: List["_field_output__.FieldOutputMetadata"] = (
        betterproto.message_field(50)
    )
    signals: List["_signal__.SignalMetadata"] = betterproto.message_field(51)


@dataclass(eq=False, repr=False)
class ControllerRuntimeInfoRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerRuntimeInfoReply(betterproto.Message):
    run_seconds: int = betterproto.uint64_field(2)
    control_seconds: int = betterproto.uint64_field(3)
    time_freeze: bool = betterproto.bool_field(30)
    time_scale: float = betterproto.float_field(31)
    coordinating: bool = betterproto.bool_field(32)
    on_schedule: bool = betterproto.bool_field(33)
    dimming: bool = betterproto.bool_field(34)
    active_phases: List[int] = betterproto.uint32_field(40)
    waiting_phases: List[int] = betterproto.uint32_field(41)
    cycle_mode: "CycleMode" = betterproto.enum_field(42)
    cycle_count: int = betterproto.uint64_field(43)


@dataclass(eq=False, repr=False)
class ControllerIdentifiableObjectRequest(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ControllerChangeVariableResult(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    changed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ControllerTimeFreezeRequest(betterproto.Message):
    time_freeze: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ControllerCycleModeRequest(betterproto.Message):
    cycle_mode: "CycleMode" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class ControllerFieldOutputReply(betterproto.Message):
    field_output: "_field_output__.FieldOutput" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerFieldOutputsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerFieldOutputsReply(betterproto.Message):
    field_outputs: List["_field_output__.FieldOutput"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerSignalReply(betterproto.Message):
    signal: "_signal__.Signal" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerSignalsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerSignalsReply(betterproto.Message):
    signals: List["_signal__.Signal"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerSignalDemandRequest(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    demand: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ControllerSignalPresenceRequest(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    presence: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ControllerPhaseReply(betterproto.Message):
    phase: "_phase__.Phase" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerPhasesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ControllerPhasesReply(betterproto.Message):
    phases: List["_phase__.Phase"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerPhaseDemandRequest(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    demand: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ControllerPresenceSimulationRequest(betterproto.Message):
    enabled: bool = betterproto.bool_field(1)


class ControllerStub(betterproto.ServiceStub):
    async def test_connection(
        self,
        controller_test_connection_request: "ControllerTestConnectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerTestConnectionReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/test_connection",
            controller_test_connection_request,
            ControllerTestConnectionReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_metadata(
        self,
        controller_metadata_request: "ControllerMetadataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerMetadataReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_metadata",
            controller_metadata_request,
            ControllerMetadataReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_runtime_info(
        self,
        controller_runtime_info_request: "ControllerRuntimeInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerRuntimeInfoReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_runtime_info",
            controller_runtime_info_request,
            ControllerRuntimeInfoReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_time_freeze(
        self,
        controller_time_freeze_request: "ControllerTimeFreezeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerChangeVariableResult":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/set_time_freeze",
            controller_time_freeze_request,
            ControllerChangeVariableResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_cycle_mode(
        self,
        controller_cycle_mode_request: "ControllerCycleModeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerChangeVariableResult":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/set_cycle_mode",
            controller_cycle_mode_request,
            ControllerChangeVariableResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_presence_simulation(
        self,
        controller_presence_simulation_request: "ControllerPresenceSimulationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerChangeVariableResult":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/set_presence_simulation",
            controller_presence_simulation_request,
            ControllerChangeVariableResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_field_output(
        self,
        controller_identifiable_object_request: "ControllerIdentifiableObjectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerFieldOutputReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_field_output",
            controller_identifiable_object_request,
            ControllerFieldOutputReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_field_outputs(
        self,
        controller_field_outputs_request: "ControllerFieldOutputsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerFieldOutputsReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_field_outputs",
            controller_field_outputs_request,
            ControllerFieldOutputsReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_signal(
        self,
        controller_identifiable_object_request: "ControllerIdentifiableObjectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerSignalReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_signal",
            controller_identifiable_object_request,
            ControllerSignalReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_signals(
        self,
        controller_signals_request: "ControllerSignalsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerSignalsReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_signals",
            controller_signals_request,
            ControllerSignalsReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_signal_demand(
        self,
        controller_signal_demand_request: "ControllerSignalDemandRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerChangeVariableResult":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/set_signal_demand",
            controller_signal_demand_request,
            ControllerChangeVariableResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_signal_presence(
        self,
        controller_signal_presence_request: "ControllerSignalPresenceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerChangeVariableResult":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/set_signal_presence",
            controller_signal_presence_request,
            ControllerChangeVariableResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_phase(
        self,
        controller_identifiable_object_request: "ControllerIdentifiableObjectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerPhaseReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_phase",
            controller_identifiable_object_request,
            ControllerPhaseReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_phases(
        self,
        controller_phases_request: "ControllerPhasesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerPhasesReply":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/get_phases",
            controller_phases_request,
            ControllerPhasesReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_phase_demand(
        self,
        controller_phase_demand_request: "ControllerPhaseDemandRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerChangeVariableResult":
        return await self._unary_unary(
            "/atsc.rpc.controller.Controller/set_phase_demand",
            controller_phase_demand_request,
            ControllerChangeVariableResult,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ControllerBase(ServiceBase):

    async def test_connection(
        self, controller_test_connection_request: "ControllerTestConnectionRequest"
    ) -> "ControllerTestConnectionReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_metadata(
        self, controller_metadata_request: "ControllerMetadataRequest"
    ) -> "ControllerMetadataReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_runtime_info(
        self, controller_runtime_info_request: "ControllerRuntimeInfoRequest"
    ) -> "ControllerRuntimeInfoReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_time_freeze(
        self, controller_time_freeze_request: "ControllerTimeFreezeRequest"
    ) -> "ControllerChangeVariableResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_cycle_mode(
        self, controller_cycle_mode_request: "ControllerCycleModeRequest"
    ) -> "ControllerChangeVariableResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_presence_simulation(
        self,
        controller_presence_simulation_request: "ControllerPresenceSimulationRequest",
    ) -> "ControllerChangeVariableResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_field_output(
        self,
        controller_identifiable_object_request: "ControllerIdentifiableObjectRequest",
    ) -> "ControllerFieldOutputReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_field_outputs(
        self, controller_field_outputs_request: "ControllerFieldOutputsRequest"
    ) -> "ControllerFieldOutputsReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_signal(
        self,
        controller_identifiable_object_request: "ControllerIdentifiableObjectRequest",
    ) -> "ControllerSignalReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_signals(
        self, controller_signals_request: "ControllerSignalsRequest"
    ) -> "ControllerSignalsReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_signal_demand(
        self, controller_signal_demand_request: "ControllerSignalDemandRequest"
    ) -> "ControllerChangeVariableResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_signal_presence(
        self, controller_signal_presence_request: "ControllerSignalPresenceRequest"
    ) -> "ControllerChangeVariableResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_phase(
        self,
        controller_identifiable_object_request: "ControllerIdentifiableObjectRequest",
    ) -> "ControllerPhaseReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_phases(
        self, controller_phases_request: "ControllerPhasesRequest"
    ) -> "ControllerPhasesReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_phase_demand(
        self, controller_phase_demand_request: "ControllerPhaseDemandRequest"
    ) -> "ControllerChangeVariableResult":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_test_connection(
        self,
        stream: "grpclib.server.Stream[ControllerTestConnectionRequest, ControllerTestConnectionReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.test_connection(request)
        await stream.send_message(response)

    async def __rpc_get_metadata(
        self,
        stream: "grpclib.server.Stream[ControllerMetadataRequest, ControllerMetadataReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_metadata(request)
        await stream.send_message(response)

    async def __rpc_get_runtime_info(
        self,
        stream: "grpclib.server.Stream[ControllerRuntimeInfoRequest, ControllerRuntimeInfoReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_runtime_info(request)
        await stream.send_message(response)

    async def __rpc_set_time_freeze(
        self,
        stream: "grpclib.server.Stream[ControllerTimeFreezeRequest, ControllerChangeVariableResult]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_time_freeze(request)
        await stream.send_message(response)

    async def __rpc_set_cycle_mode(
        self,
        stream: "grpclib.server.Stream[ControllerCycleModeRequest, ControllerChangeVariableResult]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_cycle_mode(request)
        await stream.send_message(response)

    async def __rpc_set_presence_simulation(
        self,
        stream: "grpclib.server.Stream[ControllerPresenceSimulationRequest, ControllerChangeVariableResult]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_presence_simulation(request)
        await stream.send_message(response)

    async def __rpc_get_field_output(
        self,
        stream: "grpclib.server.Stream[ControllerIdentifiableObjectRequest, ControllerFieldOutputReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_field_output(request)
        await stream.send_message(response)

    async def __rpc_get_field_outputs(
        self,
        stream: "grpclib.server.Stream[ControllerFieldOutputsRequest, ControllerFieldOutputsReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_field_outputs(request)
        await stream.send_message(response)

    async def __rpc_get_signal(
        self,
        stream: "grpclib.server.Stream[ControllerIdentifiableObjectRequest, ControllerSignalReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_signal(request)
        await stream.send_message(response)

    async def __rpc_get_signals(
        self,
        stream: "grpclib.server.Stream[ControllerSignalsRequest, ControllerSignalsReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_signals(request)
        await stream.send_message(response)

    async def __rpc_set_signal_demand(
        self,
        stream: "grpclib.server.Stream[ControllerSignalDemandRequest, ControllerChangeVariableResult]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_signal_demand(request)
        await stream.send_message(response)

    async def __rpc_set_signal_presence(
        self,
        stream: "grpclib.server.Stream[ControllerSignalPresenceRequest, ControllerChangeVariableResult]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_signal_presence(request)
        await stream.send_message(response)

    async def __rpc_get_phase(
        self,
        stream: "grpclib.server.Stream[ControllerIdentifiableObjectRequest, ControllerPhaseReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_phase(request)
        await stream.send_message(response)

    async def __rpc_get_phases(
        self,
        stream: "grpclib.server.Stream[ControllerPhasesRequest, ControllerPhasesReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_phases(request)
        await stream.send_message(response)

    async def __rpc_set_phase_demand(
        self,
        stream: "grpclib.server.Stream[ControllerPhaseDemandRequest, ControllerChangeVariableResult]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_phase_demand(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/atsc.rpc.controller.Controller/test_connection": grpclib.const.Handler(
                self.__rpc_test_connection,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerTestConnectionRequest,
                ControllerTestConnectionReply,
            ),
            "/atsc.rpc.controller.Controller/get_metadata": grpclib.const.Handler(
                self.__rpc_get_metadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerMetadataRequest,
                ControllerMetadataReply,
            ),
            "/atsc.rpc.controller.Controller/get_runtime_info": grpclib.const.Handler(
                self.__rpc_get_runtime_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerRuntimeInfoRequest,
                ControllerRuntimeInfoReply,
            ),
            "/atsc.rpc.controller.Controller/set_time_freeze": grpclib.const.Handler(
                self.__rpc_set_time_freeze,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerTimeFreezeRequest,
                ControllerChangeVariableResult,
            ),
            "/atsc.rpc.controller.Controller/set_cycle_mode": grpclib.const.Handler(
                self.__rpc_set_cycle_mode,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerCycleModeRequest,
                ControllerChangeVariableResult,
            ),
            "/atsc.rpc.controller.Controller/set_presence_simulation": grpclib.const.Handler(
                self.__rpc_set_presence_simulation,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerPresenceSimulationRequest,
                ControllerChangeVariableResult,
            ),
            "/atsc.rpc.controller.Controller/get_field_output": grpclib.const.Handler(
                self.__rpc_get_field_output,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerIdentifiableObjectRequest,
                ControllerFieldOutputReply,
            ),
            "/atsc.rpc.controller.Controller/get_field_outputs": grpclib.const.Handler(
                self.__rpc_get_field_outputs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerFieldOutputsRequest,
                ControllerFieldOutputsReply,
            ),
            "/atsc.rpc.controller.Controller/get_signal": grpclib.const.Handler(
                self.__rpc_get_signal,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerIdentifiableObjectRequest,
                ControllerSignalReply,
            ),
            "/atsc.rpc.controller.Controller/get_signals": grpclib.const.Handler(
                self.__rpc_get_signals,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerSignalsRequest,
                ControllerSignalsReply,
            ),
            "/atsc.rpc.controller.Controller/set_signal_demand": grpclib.const.Handler(
                self.__rpc_set_signal_demand,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerSignalDemandRequest,
                ControllerChangeVariableResult,
            ),
            "/atsc.rpc.controller.Controller/set_signal_presence": grpclib.const.Handler(
                self.__rpc_set_signal_presence,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerSignalPresenceRequest,
                ControllerChangeVariableResult,
            ),
            "/atsc.rpc.controller.Controller/get_phase": grpclib.const.Handler(
                self.__rpc_get_phase,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerIdentifiableObjectRequest,
                ControllerPhaseReply,
            ),
            "/atsc.rpc.controller.Controller/get_phases": grpclib.const.Handler(
                self.__rpc_get_phases,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerPhasesRequest,
                ControllerPhasesReply,
            ),
            "/atsc.rpc.controller.Controller/set_phase_demand": grpclib.const.Handler(
                self.__rpc_set_phase_demand,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerPhaseDemandRequest,
                ControllerChangeVariableResult,
            ),
        }
