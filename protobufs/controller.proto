/*
*  Copyright 2024 Jacob Jewett
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*/
syntax = "proto3";


import "protobufs/field_output.proto";
import "protobufs/signal.proto";
import "protobufs/phase.proto";


package atsc.rpc.controller;


enum CycleMode {
  PAUSE = 0;
  SEQUENTIAL = 1;
  CONCURRENT = 2;
}


message ControllerTestConnectionRequest {}
message ControllerTestConnectionReply {}


message ControllerMetadataRequest {}
message ControllerMetadataReply {
  string version = 10;

  uint64 started_at_epoch = 11;

  bool supports_time_freeze = 30;
  bool supports_time_scaling = 31;
  bool supports_coordination = 32;
  bool supports_scheduling = 33;
  bool supports_dimming = 34;

  repeated atsc.rpc.field_output.FieldOutputMetadata field_outputs = 50;
  repeated atsc.rpc.signal.SignalMetadata signals = 51;
}

message ControllerRuntimeInfoRequest {}
message ControllerRuntimeInfoReply {
  uint64 run_seconds = 2;
  uint64 control_seconds = 3;

  bool time_freeze = 30;
  float time_scale = 31;
  bool coordinating = 32;
  bool on_schedule = 33;
  bool dimming = 34;

  repeated uint32 active_phases = 40;
  repeated uint32 waiting_phases = 41;
  CycleMode cycle_mode = 42;
  uint64 cycle_count = 43;
}

message ControllerIdentifiableObjectRequest {
  uint32 id = 1;
}

message ControllerChangeVariableResult {
  bool success = 1;
  bool changed = 2;
}

message ControllerTimeFreezeRequest {
  bool time_freeze = 1;
}

message ControllerCycleModeRequest {
  CycleMode cycle_mode = 1;
}

message ControllerFieldOutputReply {
  atsc.rpc.field_output.FieldOutput field_output = 1;
}

message ControllerFieldOutputsRequest {}
message ControllerFieldOutputsReply {
  repeated atsc.rpc.field_output.FieldOutput field_outputs = 1;
}

message ControllerSignalReply {
  atsc.rpc.signal.Signal signal = 1;
}

message ControllerSignalsRequest {}
message ControllerSignalsReply {
  repeated atsc.rpc.signal.Signal signals = 1;
}

message ControllerSignalDemandRequest {
  uint32 id = 1;
  bool demand = 2;
}

message ControllerSignalPresenceRequest {
  uint32 id = 1;
  bool presence = 2;
}

message ControllerPhaseReply {
  atsc.rpc.phase.Phase phase = 1;
}

message ControllerPhasesRequest {}
message ControllerPhasesReply {
  repeated atsc.rpc.phase.Phase phases = 1;
}

message ControllerPhaseDemandRequest {
  uint32 id = 1;
  bool demand = 2;
}

message ControllerPresenceSimulationRequest {
  bool enabled = 1;
}

message ControllerFYAEnabledRequest {
  bool enabled = 1;
}

service Controller {
  rpc test_connection(ControllerTestConnectionRequest) returns (ControllerTestConnectionReply) {}
  rpc get_metadata(ControllerMetadataRequest) returns (ControllerMetadataReply) {}
  rpc get_runtime_info(ControllerRuntimeInfoRequest) returns (ControllerRuntimeInfoReply) {}

  rpc set_time_freeze(ControllerTimeFreezeRequest) returns (ControllerChangeVariableResult) {}
  rpc set_cycle_mode(ControllerCycleModeRequest) returns (ControllerChangeVariableResult) {}

  rpc set_presence_simulation(ControllerPresenceSimulationRequest) returns (ControllerChangeVariableResult) {}
  rpc set_fya_enabled(ControllerFYAEnabledRequest) returns (ControllerChangeVariableResult) {}

  rpc get_field_output(ControllerIdentifiableObjectRequest) returns (ControllerFieldOutputReply) {}
  rpc get_field_outputs(ControllerFieldOutputsRequest) returns (ControllerFieldOutputsReply) {}

  rpc get_signal(ControllerIdentifiableObjectRequest) returns (ControllerSignalReply) {}
  rpc get_signals(ControllerSignalsRequest) returns (ControllerSignalsReply) {}
  rpc set_signal_demand(ControllerSignalDemandRequest) returns (ControllerChangeVariableResult) {}
  rpc set_signal_presence(ControllerSignalPresenceRequest) returns (ControllerChangeVariableResult) {}

  rpc get_phase(ControllerIdentifiableObjectRequest) returns (ControllerPhaseReply) {}
  rpc get_phases(ControllerPhasesRequest) returns (ControllerPhasesReply) {}
  rpc set_phase_demand(ControllerPhaseDemandRequest) returns (ControllerChangeVariableResult) {}
}
